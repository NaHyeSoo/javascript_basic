scope : 변수가 어느 범위까지 참조되는지
변수는 선언된 함수 안에서만 접근 가능 
즉, 변수의 scope는 함수의 scope를 따름 

안쪽 Scope에서 바깥 변수/함수에 접근하는 것은 가능하지만, 
바깥쪽 Scope에서 안쪽 변수/함수에 접근할 수는 없다.

1. Local Scope Vs. Global Scope
지역변수는 전역변수보다 우선순위가 높기 때문에, 
변수 이름이 같으면 지역변수가 더 우선된다. 

let last_name = 'lee';
function func() {
  let first_name = 'youjin';
  let last_name = 'park';
  return last_name + ' ' + first_name;
}

func(); // 'park youjin'
console.log(last_name); // 'lee'

여기서는 last_name이 전역과 func() 함수에 선언되었다. 
func() 함수 안에서 선언된 last_name가 지역변수이므로 더 우선순위가 높다.
그러나 지역변수는 해당 scope 안에서만 유효하며, 
바깥 함수에서는 안쪽 함수/변수에 접근하지 못하므로 전역에서의 last_name은 'lee'이다.

2) Function Scope Vs. Block Scope
자바스크립트에서 변수를 선언하는 키워드는 크게 3가지가 있다. var, let, const

var는 Function Scope를 가진다. 다시 말해, var로 선언된 변수의 scope는 곧 내가 속한 함수의 scope이다.
let과 const는 Block Scope를 가진다. 
let이나 const로 선언된 변수의 scope는 내가 속한 블록(중괄호 { })의 scope이다. 
(블록의 scope이라 하니 어렵게 느껴지는데, 그냥 중괄호의 시작부터 끝까지이다.)

/* var 키워드를 사용했을 때 */
for (var i=0; i<5; i+=1) {
  console.log(i);		// 0 1 2 3 4
};
console.log(i); 		// 5

var를 사용한 변수는 함수의 scope를 따른다. 
여기서는 전역이므로 코드 어디서나 i에 접근할 수 있다. 따라서 for문이 끝나도 i에 접근할 수 있다.

/* let 키워드를 사용했을 때 */
for (let j=0; j<5; j+=1) {
  console.log(j);		// 0 1 2 3 4
}
console.log(j);			// ReferenceError

let을 사용한 변수는 블록의 scope를 따른다. for문은 블록({ })으로 감싸져 있다. 
let으로 선언된 j는 for문의 블록에서만 유효하다. 
따라서 for문 밖에서는 j에 접근할 수 없다. 바깥 함수에서는 내부 함수/변수에 접근할 수 없기 때문이다.